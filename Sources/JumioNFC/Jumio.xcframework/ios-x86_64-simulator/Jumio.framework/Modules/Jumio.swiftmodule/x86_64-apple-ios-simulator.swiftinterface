// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Jumio
import Combine
import Foundation
@_exported import Jumio
import Swift
import SwiftUI
import UIKit
import _Concurrency
public struct Jumio {
}
extension Jumio {
  @objc @_inheritsConvenienceInitializers public class SDK : NSObject {
    public static var version: String {
      get
    }
    public static var isJailbroken: Bool {
      get
    }
    public var dataCenter: Jumio.DataCenter? {
      get
      set
    }
    public var token: String {
      get
      set
    }
    weak public var defaultUIDelegate: DefaultUIDelegate? {
      get
      set
    }
    @objc override dynamic public init()
    public func viewController() throws -> Jumio.ViewController
    public func startDefaultUI()
    public func start(_ delegate: Jumio.Controller.Delegate) -> Jumio.Controller
    public func customize(theme: Jumio.Theme)
    @objc deinit
  }
}
extension Jumio {
  @objc @_hasMissingDesignatedInitializers public class IDResult : CredentialResult {
    public var issuingCountry: String? {
      get
    }
    public var idType: String? {
      get
    }
    public var firstName: String? {
      get
    }
    public var lastName: String? {
      get
    }
    public var dateOfBirth: String? {
      get
    }
    public var issuingDate: String? {
      get
    }
    public var expiryDate: String? {
      get
    }
    public var documentNumber: String? {
      get
    }
    public var personalNumber: String? {
      get
    }
    public var gender: String? {
      get
    }
    public var nationality: String? {
      get
    }
    public var placeOfBirth: String? {
      get
    }
    public var country: String? {
      get
    }
    public var address: String? {
      get
    }
    public var city: String? {
      get
    }
    public var subdivision: String? {
      get
    }
    public var postalCode: String? {
      get
    }
    public var mrzLine1: String? {
      get
    }
    public var mrzLine2: String? {
      get
    }
    public var mrzLine3: String? {
      get
    }
    public var rawBarcodeData: String? {
      get
    }
    @objc deinit
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class ISOCountryConverter {
    public class func toAlpha2(_ code: String) -> String?
    public class func toAlpha3(_ code: String) -> String?
    @objc deinit
  }
}
extension Jumio.Credential {
  public struct Info {
    public var category: Category {
      get
    }
    public var id: String {
      get
    }
  }
}
extension Jumio.Theme {
  public struct Loading {
    public init()
    public var circlePlain: Value?
    public var loadingCircleGradientStart: Value?
    public var loadingCircleGradientEnd: Value?
    public var errorCircleGradientStart: Value?
    public var errorCircleGradientEnd: Value?
    public var circleIcon: Value?
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class JumioViewController : UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Jumio {
  public typealias ViewController = JumioViewController
}
@available(iOS 13.0.0, *)
extension Jumio.ViewController : UIViewControllerRepresentable {
  public typealias UIViewControllerType = UINavigationController
  @_Concurrency.MainActor(unsafe) final public func makeUIViewController(context: Context) -> UINavigationController
  @_Concurrency.MainActor(unsafe) final public func updateUIViewController(_ uiViewController: UINavigationController, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
}
extension Jumio {
  public enum RejectReason : String {
    case generic
    case blurry
    case digitalCopy
    case blackWhiteCopy
    case noDoc
    case glare
    case missingFront
    case missingBack
    case notReadable
    case missingPartDoc
    case damagedDocument
    case hiddenPartDoc
    case colorPhotocopy
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension Jumio.Theme {
  public struct Bubble {
    public init()
    public var background: Value?
    public var foreground: Value?
    public var backgroundSelected: Value?
    public var circleItemBackground: Value?
    public var circleItemForeground: Value?
    public var selectionIconForeground: Value?
  }
  public struct SearchBubble {
    public init()
    public var background: Value?
    public var foreground: Value?
    public var listItemSelected: Value?
  }
}
public protocol JumioDefaultUIDelegate : AnyObject {
  func jumio(sdk: Jumio.SDK, finished result: Jumio.Result)
}
extension Jumio {
  public typealias DefaultUIDelegate = JumioDefaultUIDelegate
}
extension Jumio {
  public struct Document : CustomDebugStringConvertible, Equatable {
    public enum DocumentType : String, CaseIterable {
      case passport
      case visa
      case drivingLicense
      case identityCard
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Jumio.Document.DocumentType]
      public typealias RawValue = Swift.String
      public static var allCases: [Jumio.Document.DocumentType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public enum DocumentVariant : String {
      case plastic
      case paper
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var debugDescription: String {
      get
    }
    public var type: DocumentType {
      get
    }
    public var variant: DocumentVariant {
      get
    }
    public static func == (lhs: Document, rhs: Document) -> Bool
  }
}
extension Jumio {
  public struct Confirmation {
  }
}
extension Jumio {
  @objc @_hasMissingDesignatedInitializers public class CredentialResult : NSObject {
    public var imageData: ImageData? {
      get
    }
    public var extractionMode: Scan.Mode? {
      get
    }
    @objc deinit
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class Controller {
    weak public var delegate: Jumio.Controller.Delegate? {
      get
    }
    public var isComplete: Bool {
      get
    }
    public func cancel()
    public func finish()
    public func start(credentialInfo: Jumio.Credential.Info) -> Jumio.Credential?
    public func retry(error: Jumio.Error)
    public func userConsented()
    @objc deinit
  }
}
extension Jumio {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FaceCredential : Credential {
    public func initScanPart(scanPartDelegate: Jumio.Scan.Part.Delegate) -> Jumio.Scan.Part?
    @objc deinit
  }
}
extension Jumio.Theme {
  public struct PrimaryButton {
    public init()
    public var background: Value?
    public var backgroundPressed: Value?
    public var backgroundDisabled: Value?
    public var text: Value?
  }
  public struct SecondaryButton {
    public init()
    public var background: Value?
    public var backgroundPressed: Value?
    public var backgroundDisabled: Value?
    public var text: Value?
  }
}
extension Jumio {
  public enum CameraFacing {
    case front
    case back
    public static func == (a: Jumio.CameraFacing, b: Jumio.CameraFacing) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Credential {
  public enum Part {
    case front
    case back
    case face
    case nfc
    case deviceRisk
    public static func == (a: Jumio.Credential.Part, b: Jumio.Credential.Part) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Jumio {
  public struct Scan {
    public enum Mode {
      case manual
      case faceManual
      case lineFinder
      case barcode
      case mrz
      case nfc
      case faceIProov
      case deviceRisk
      public static func == (a: Jumio.Scan.Mode, b: Jumio.Scan.Mode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Update {
      case fallback
      case legalHint
      case nfcExtractionStarted
      case nfcExtractionProgress
      case nfcExtractionFinished
      public static func == (a: Jumio.Scan.Update, b: Jumio.Scan.Update) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Step {
      case prepare
      case started
      case scanView
      case imageTaken
      case processing
      case confirmationView
      case rejectView
      case retry
      case canFinish
      case addonScanPart
      public static func == (a: Jumio.Scan.Step, b: Jumio.Scan.Step) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
}
extension Jumio {
  public struct Retry {
  }
}
extension Jumio.Retry {
  @_hasMissingDesignatedInitializers public class Reason {
    public var message: String {
      get
    }
    public var code: Int {
      get
    }
    @objc deinit
  }
}
extension Jumio.Retry.Reason {
  public enum Generic : Int {
    case generic
    case userCancel
    case attemptFailed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Retry.Reason {
  public enum iProov : Int {
    case ambiguousOutcome
    case motionTooMuch
    case lightingFlash
    case lightingBacklit
    case lightingTooDark
    case lightingTooBright
    case motionMouth
    case genericFailure
    case cameraPermission
    case captureAlreadyActive
    case unexpected
    case server
    case network
    case genericError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Retry.Reason {
  public enum NFC : Int {
    case bacError
    case tagLost
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio {
  public struct Error {
    public var message: String {
      get
    }
    public var code: String {
      get
    }
    public var domain: String {
      get
    }
    public var isRetryable: Bool {
      get
    }
  }
  public enum SetupError : Swift.Error {
    case requestedViewControllerForCustomUI
    case standardViewControllerNotAvailable
    public static func == (a: Jumio.SetupError, b: Jumio.SetupError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum LogicalError : Swift.Error {
    case dependencyWrongVersion
    case noDataCenterSet
    case deadController
    case errorNotRetryable
    case needToConsentFirst
    case controllerNotCompleted
    case isBeingFinished
    case multipleCredentials
    case unknownCredential
    case deadCredential
    case credentialNotCompleted
    case multipleScanParts
    case unknownScanPart
    case scanPartNotCompleted
    case deadScanPart
    case noFallbackAvailable
    case takePictureNotAllowed
    public static func == (a: Jumio.LogicalError, b: Jumio.LogicalError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol JumioControllerDelegate : AnyObject {
  func jumio(controller: Jumio.Controller, didInitializeWith credentialInformations: [Jumio.Credential.Info], policyUrl: String?)
  func jumio(controller: Jumio.Controller, error: Jumio.Error)
  func jumio(controller: Jumio.Controller, finished result: Jumio.Result)
  func jumio(controller: Jumio.Controller, logicalError: Jumio.LogicalError)
}
extension Jumio.Controller {
  public typealias Delegate = JumioControllerDelegate
}
@objc @_Concurrency.MainActor(unsafe) final public class JumioRejectView : UIView {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) final public func attach(scanPart: Jumio.Scan.Part)
  @_Concurrency.MainActor(unsafe) final public func retake()
  @objc deinit
}
extension Jumio {
  public struct Reject {
  }
}
extension Jumio.Reject {
  public typealias View = JumioRejectView
}
@available(iOS 13.0.0, *)
extension Jumio.Reject.View : UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) final public func makeUIView(context: Context) -> some UIView
  
  @_Concurrency.MainActor(unsafe) final public func updateUIView(_ uiView: UIViewType, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s5Jumio0A10RejectViewC10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
extension Jumio.Theme {
  public struct NFC {
    public init()
    public var passportCover: Value?
    public var passportPageDark: Value?
    public var passportPageLight: Value?
    public var passportForeground: Value?
    public var phoneCover: Value?
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class Credential {
    public var parts: [Jumio.Credential.Part] {
      get
    }
    public var isConfigured: Bool {
      get
    }
    public var isComplete: Bool {
      get
    }
    public func initScanPart(_ credentialPart: Jumio.Credential.Part, scanPartDelegate: Jumio.Scan.Part.Delegate) -> Jumio.Scan.Part?
    public func getAddonScanPart(scanPartDelegate: Jumio.Scan.Part.Delegate) -> Jumio.Scan.Part?
    public func cancel()
    public func finish()
    @objc deinit
  }
}
extension Jumio {
  public enum DataCenter : Int {
    case EU
    case US
    case SG
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class ImageData {
    public var images: [Credential.Part : UIImage] {
      get
    }
    public func has(part: Credential.Part) -> Bool
    public func clear()
    @objc deinit
  }
}
extension Jumio {
  public struct Theme {
    public struct Value {
      public init(light: UIColor, dark: UIColor)
      public init(_ standard: UIColor)
    }
    public init()
    public var primaryButton: Jumio.Theme.PrimaryButton
    public var secondaryButton: Jumio.Theme.SecondaryButton
    public var scanOverlay: Jumio.Theme.ScanOverlay
    public var scanView: Jumio.Theme.ScanView
    public var loading: Jumio.Theme.Loading
    public var bubble: Jumio.Theme.Bubble
    public var searchBubble: Jumio.Theme.SearchBubble
    public var iProov: Jumio.Theme.IProov
    public var nfc: Jumio.Theme.NFC
    public var background: Value?
    public var primaryColor: Value?
    public var textForegroundColor: Value?
    public var navigationIconColor: Value?
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class JumioScanView : UIView {
  @_Concurrency.MainActor(unsafe) final public var isShutterEnabled: Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var hasFlash: Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var cameraFacing: Jumio.CameraFacing {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var flash: Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var extraction: Bool {
    get
    set
  }
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) final public func attach(scanPart: Jumio.Scan.Part)
  @_Concurrency.MainActor(unsafe) final public func takePicture()
  @_Concurrency.MainActor(unsafe) final public func switchCamera()
  @_Concurrency.MainActor(unsafe) final public func resume()
  @_Concurrency.MainActor(unsafe) final public func pause()
  @objc deinit
}
extension Jumio.Scan {
  public typealias View = JumioScanView
}
@available(iOS 13.0.0, *)
extension Jumio.Scan.View : UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) final public func makeUIView(context: Context) -> some UIView
  
  @_Concurrency.MainActor(unsafe) final public func updateUIView(_ uiView: UIViewType, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s5Jumio0A8ScanViewC10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
@_inheritsConvenienceInitializers @objc public class JumioSDK : NSObject {
  @objc public static var sdkVersion: String {
    @objc get
  }
  @objc public var dataCenter: JumioDataCenter {
    @objc get
    @objc set
  }
  @objc public var token: String {
    @objc get
    @objc set
  }
  @objc weak public var defaultUIDelegate: JumioDefaultUIDelegateObjC? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public func startDefaultUI()
  @objc(viewControllerOrError:) public func viewController() throws -> Jumio.ViewController
  @objc deinit
}
@objc(JumioDefaultUIDelegate) public protocol JumioDefaultUIDelegateObjC {
  @objc func jumioSDK(_ sdk: JumioSDK, finished: JumioResult)
}
@objc public class JumioDocument : NSObject {
  @objc final public let type: String
  @objc final public let variant: String
  @objc public init(type: String, variant: String)
  @objc deinit
}
@objc(JumioError) public class ObjCJumioError : NSObject {
  @objc final public let code: String
  @objc final public let message: String
  @objc final public let domain: String
  @objc final public let isRetryable: Bool
  @objc public init(code: String, message: String, domain: String, isRetryable: Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(JumioConfirmation) public class ObjCJumioConfirmation : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(JumioInformation) public class ObjCJumioInformation : NSObject {
  @objc final public let view: UIView?
  @objc final public let error: ObjCJumioError?
  @objc final public let confirmation: ObjCJumioConfirmation?
  @objc deinit
}
@objc public enum JumioDataCenter : Int {
  case EU = 0
  case US = 1
  case SG = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum JumioCredentialCategory : Int {
  case id = 0
  case face = 1
  case document = 2
  case data = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class JumioCredentialInfo : NSObject {
  @objc final public let category: JumioCredentialCategory
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class JumioIDResult : NSObject {
  @objc final public let issuingCountry: String?
  @objc final public let idType: String?
  @objc final public let firstName: String?
  @objc final public let lastName: String?
  @objc final public let dateOfBirth: String?
  @objc final public let issuingDate: String?
  @objc final public let expiryDate: String?
  @objc final public let documentNumber: String?
  @objc final public let personalNumber: String?
  @objc final public let gender: String?
  @objc final public let nationality: String?
  @objc final public let placeOfBirth: String?
  @objc final public let country: String?
  @objc final public let address: String?
  @objc final public let city: String?
  @objc final public let subdivision: String?
  @objc final public let postalCode: String?
  @objc final public let mrzLine1: String?
  @objc final public let mrzLine2: String?
  @objc final public let mrzLine3: String?
  @objc final public let rawBarcodeData: String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class JumioFaceResult : NSObject {
  @objc final public let passed: Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class JumioResult : NSObject {
  @objc final public let isSuccess: Bool
  @objc final public let credentialInfos: [JumioCredentialInfo]
  @objc final public let error: ObjCJumioError?
  @objc public func getIDResult(of credentialInfo: JumioCredentialInfo) -> JumioIDResult?
  @objc public func getFaceResult(of credentialInfo: JumioCredentialInfo) -> JumioFaceResult?
  @objc deinit
}
public protocol JumioScanPartDelegate : AnyObject {
  func jumio(scanPart: Jumio.Scan.Part, updates update: Jumio.Scan.Update, data: Any?)
  func jumio(scanPart: Jumio.Scan.Part, step: Jumio.Scan.Step, data: Any?)
}
extension Jumio.Scan.Part {
  public typealias Delegate = JumioScanPartDelegate
}
extension Jumio.Theme {
  public struct ScanOverlay {
    public init()
    public var scanOverlay: Value?
    public var fill: Value?
    public var scanOverlayTransparent: Value?
    public var scanBackground: Value?
  }
}
extension Jumio.Scan {
  @_hasMissingDesignatedInitializers public class Part {
    weak public var delegate: Delegate? {
      get
    }
    public var scanMode: Mode {
      get
    }
    public var hasFallback: Bool {
      get
    }
    public func start()
    public func retry(reason: Jumio.Retry.Reason)
    public func fallback()
    public func cancel()
    public func finish()
    public func getHelpAnimation() -> UIView?
    @objc deinit
  }
}
extension Jumio.Theme {
  public struct ScanView {
    public init()
    public var foreground: Value?
    public var animationBackground: Value?
    public var bubbleBackground: Value?
    public var bubbleForeground: Value?
    public var shutter: Value?
  }
}
extension Jumio {
  @objc @_hasMissingDesignatedInitializers public class FaceResult : CredentialResult {
    public var passed: Bool? {
      get
    }
    @objc deinit
  }
}
extension Jumio.Credential {
  public enum Category {
    case id
    case face
    case document
    case data
    public static func == (a: Jumio.Credential.Category, b: Jumio.Credential.Category) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Jumio.Theme {
  public struct IProov {
    public init()
    public var animationForeground: Value?
    public var animationBackground: Value?
    public var lineColor: Value?
    public var headerTextColor: Value?
    public var headerBackgroundColor: Value?
    public var closeButtonTintColor: Value?
    public var promptTextColor: Value?
    public var footerBackgroundColor: Value?
    public var livenessAssurancePrimaryTintColor: Value?
    public var livenessAssuranceSecondaryTintColor: Value?
    public var genuinePresenceAssuranceProgressBarColor: Value?
    public var genuinePresenceAssuranceNotReadyTintColor: Value?
    public var genuinePresenceAssuranceReadyTintColor: Value?
    public var floatingPromptEnabled: Bool?
  }
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class IDCredential : Credential {
    public var countries: [String : [Jumio.Document]] {
      get
    }
    public var suggestedCountry: String? {
      get
    }
    public func isSupportedConfiguration(country: String, document: Jumio.Document) -> Bool
    public func setConfiguration(country: String, document: Jumio.Document)
    override public func finish()
    @objc deinit
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class JumioConfirmationView : UIView {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) final public func attach(scanPart: Jumio.Scan.Part)
  @_Concurrency.MainActor(unsafe) final public func retake()
  @_Concurrency.MainActor(unsafe) final public func confirm()
  @objc deinit
}
extension Jumio.Confirmation {
  public typealias View = JumioConfirmationView
}
@available(iOS 13.0.0, *)
extension JumioConfirmationView : UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) final public func makeUIView(context: Context) -> some UIView
  
  @_Concurrency.MainActor(unsafe) final public func updateUIView(_ uiView: UIViewType, context: Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s5Jumio0A16ConfirmationViewC10makeUIView7contextQr7SwiftUI0E20RepresentableContextVyACG_tF", 0) __
}
extension Jumio {
  @_hasMissingDesignatedInitializers public class Result {
    public var workflowExecutionId: String? {
      get
    }
    public var accountId: String? {
      get
    }
    public var isSuccess: Bool {
      get
    }
    public var credentialInfos: [Jumio.Credential.Info] {
      get
    }
    public var error: Jumio.Error? {
      get
    }
    public func getIDResult(of credentialInfo: Jumio.Credential.Info) -> IDResult?
    public func getFaceResult(of credentialInfo: Jumio.Credential.Info) -> FaceResult?
    public func getResult(of credentialInfo: Jumio.Credential.Info) -> CredentialResult?
    @objc deinit
  }
}
extension Jumio.RejectReason : Swift.Equatable {}
extension Jumio.RejectReason : Swift.Hashable {}
extension Jumio.RejectReason : Swift.RawRepresentable {}
extension Jumio.Document.DocumentType : Swift.Equatable {}
extension Jumio.Document.DocumentType : Swift.Hashable {}
extension Jumio.Document.DocumentType : Swift.RawRepresentable {}
extension Jumio.Document.DocumentVariant : Swift.Equatable {}
extension Jumio.Document.DocumentVariant : Swift.Hashable {}
extension Jumio.Document.DocumentVariant : Swift.RawRepresentable {}
extension Jumio.CameraFacing : Swift.Equatable {}
extension Jumio.CameraFacing : Swift.Hashable {}
extension Jumio.Credential.Part : Swift.Equatable {}
extension Jumio.Credential.Part : Swift.Hashable {}
extension Jumio.Scan.Mode : Swift.Equatable {}
extension Jumio.Scan.Mode : Swift.Hashable {}
extension Jumio.Scan.Update : Swift.Equatable {}
extension Jumio.Scan.Update : Swift.Hashable {}
extension Jumio.Scan.Step : Swift.Equatable {}
extension Jumio.Scan.Step : Swift.Hashable {}
extension Jumio.Retry.Reason.Generic : Swift.Equatable {}
extension Jumio.Retry.Reason.Generic : Swift.Hashable {}
extension Jumio.Retry.Reason.Generic : Swift.RawRepresentable {}
extension Jumio.Retry.Reason.iProov : Swift.Equatable {}
extension Jumio.Retry.Reason.iProov : Swift.Hashable {}
extension Jumio.Retry.Reason.iProov : Swift.RawRepresentable {}
extension Jumio.Retry.Reason.NFC : Swift.Equatable {}
extension Jumio.Retry.Reason.NFC : Swift.Hashable {}
extension Jumio.Retry.Reason.NFC : Swift.RawRepresentable {}
extension Jumio.SetupError : Swift.Equatable {}
extension Jumio.SetupError : Swift.Hashable {}
extension Jumio.LogicalError : Swift.Equatable {}
extension Jumio.LogicalError : Swift.Hashable {}
extension Jumio.DataCenter : Swift.Equatable {}
extension Jumio.DataCenter : Swift.Hashable {}
extension Jumio.DataCenter : Swift.RawRepresentable {}
extension JumioDataCenter : Swift.Equatable {}
extension JumioDataCenter : Swift.Hashable {}
extension JumioDataCenter : Swift.RawRepresentable {}
extension JumioCredentialCategory : Swift.Equatable {}
extension JumioCredentialCategory : Swift.Hashable {}
extension JumioCredentialCategory : Swift.RawRepresentable {}
extension Jumio.Credential.Category : Swift.Equatable {}
extension Jumio.Credential.Category : Swift.Hashable {}
